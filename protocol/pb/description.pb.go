// Code generated by protoc-gen-go. DO NOT EDIT.
// source: description.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceInformation_Platform int32

const (
	DeviceInformation_MOBILE DeviceInformation_Platform = 0
	DeviceInformation_PC     DeviceInformation_Platform = 1
)

var DeviceInformation_Platform_name = map[int32]string{
	0: "MOBILE",
	1: "PC",
}

var DeviceInformation_Platform_value = map[string]int32{
	"MOBILE": 0,
	"PC":     1,
}

func (x DeviceInformation_Platform) String() string {
	return proto.EnumName(DeviceInformation_Platform_name, int32(x))
}

func (DeviceInformation_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed1487b35d25909c, []int{0, 0}
}

type DeviceInformation struct {
	// application_id is defined by the developer of the application
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// application_version is human-readable current version of the application
	ApplicationVersion string `protobuf:"bytes,2,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"`
	// platform describes the platform device is on
	Platform DeviceInformation_Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=DeviceInformation_Platform" json:"platform,omitempty"`
	// device_details contains some information about the device, that can help identifying it.
	// E.g. OS version, manufacturer, and/or model
	DeviceDetails string `protobuf:"bytes,4,opt,name=device_details,json=deviceDetails,proto3" json:"device_details,omitempty"`
	// name is a string that has human-defined device name
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInformation) Reset()         { *m = DeviceInformation{} }
func (m *DeviceInformation) String() string { return proto.CompactTextString(m) }
func (*DeviceInformation) ProtoMessage()    {}
func (*DeviceInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed1487b35d25909c, []int{0}
}

func (m *DeviceInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInformation.Unmarshal(m, b)
}
func (m *DeviceInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInformation.Marshal(b, m, deterministic)
}
func (m *DeviceInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInformation.Merge(m, src)
}
func (m *DeviceInformation) XXX_Size() int {
	return xxx_messageInfo_DeviceInformation.Size(m)
}
func (m *DeviceInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInformation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInformation proto.InternalMessageInfo

func (m *DeviceInformation) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *DeviceInformation) GetApplicationVersion() string {
	if m != nil {
		return m.ApplicationVersion
	}
	return ""
}

func (m *DeviceInformation) GetPlatform() DeviceInformation_Platform {
	if m != nil {
		return m.Platform
	}
	return DeviceInformation_MOBILE
}

func (m *DeviceInformation) GetDeviceDetails() string {
	if m != nil {
		return m.DeviceDetails
	}
	return ""
}

func (m *DeviceInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthenticationDetails struct {
	// authentication_token is an array of random bytes, that is used to authenticate current device on the server
	AuthenticationToken []byte `protobuf:"bytes,1,opt,name=authentication_token,json=authenticationToken,proto3" json:"authentication_token,omitempty"`
	// device_id is UUID that is used to target current device in different operations, e.g. slave key exchanges
	DeviceId             []byte   `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticationDetails) Reset()         { *m = AuthenticationDetails{} }
func (m *AuthenticationDetails) String() string { return proto.CompactTextString(m) }
func (*AuthenticationDetails) ProtoMessage()    {}
func (*AuthenticationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed1487b35d25909c, []int{1}
}

func (m *AuthenticationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticationDetails.Unmarshal(m, b)
}
func (m *AuthenticationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticationDetails.Marshal(b, m, deterministic)
}
func (m *AuthenticationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationDetails.Merge(m, src)
}
func (m *AuthenticationDetails) XXX_Size() int {
	return xxx_messageInfo_AuthenticationDetails.Size(m)
}
func (m *AuthenticationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationDetails proto.InternalMessageInfo

func (m *AuthenticationDetails) GetAuthenticationToken() []byte {
	if m != nil {
		return m.AuthenticationToken
	}
	return nil
}

func (m *AuthenticationDetails) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type RegistrationDetails struct {
	// username is string, that may contain latin alphabet, underscores, and dots.
	// This string is case-insensitive and must be unique across the server
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// master_key is the public Ed25519 key, that is used for secure session establishment.
	// This field may be replaced in the future by an array of pre-generated ephemeral keys
	MasterKey            []byte   `protobuf:"bytes,2,opt,name=master_key,json=masterKey,proto3" json:"master_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationDetails) Reset()         { *m = RegistrationDetails{} }
func (m *RegistrationDetails) String() string { return proto.CompactTextString(m) }
func (*RegistrationDetails) ProtoMessage()    {}
func (*RegistrationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed1487b35d25909c, []int{2}
}

func (m *RegistrationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationDetails.Unmarshal(m, b)
}
func (m *RegistrationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationDetails.Marshal(b, m, deterministic)
}
func (m *RegistrationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationDetails.Merge(m, src)
}
func (m *RegistrationDetails) XXX_Size() int {
	return xxx_messageInfo_RegistrationDetails.Size(m)
}
func (m *RegistrationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationDetails proto.InternalMessageInfo

func (m *RegistrationDetails) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegistrationDetails) GetMasterKey() []byte {
	if m != nil {
		return m.MasterKey
	}
	return nil
}

type RegistrationConfirmation struct {
	// user_id is UUID that is used to target current user in different operations, e.g. sending messages
	UserId               []byte   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationConfirmation) Reset()         { *m = RegistrationConfirmation{} }
func (m *RegistrationConfirmation) String() string { return proto.CompactTextString(m) }
func (*RegistrationConfirmation) ProtoMessage()    {}
func (*RegistrationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed1487b35d25909c, []int{3}
}

func (m *RegistrationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationConfirmation.Unmarshal(m, b)
}
func (m *RegistrationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationConfirmation.Marshal(b, m, deterministic)
}
func (m *RegistrationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationConfirmation.Merge(m, src)
}
func (m *RegistrationConfirmation) XXX_Size() int {
	return xxx_messageInfo_RegistrationConfirmation.Size(m)
}
func (m *RegistrationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationConfirmation proto.InternalMessageInfo

func (m *RegistrationConfirmation) GetUserId() []byte {
	if m != nil {
		return m.UserId
	}
	return nil
}

func init() {
	proto.RegisterEnum("DeviceInformation_Platform", DeviceInformation_Platform_name, DeviceInformation_Platform_value)
	proto.RegisterType((*DeviceInformation)(nil), "DeviceInformation")
	proto.RegisterType((*AuthenticationDetails)(nil), "AuthenticationDetails")
	proto.RegisterType((*RegistrationDetails)(nil), "RegistrationDetails")
	proto.RegisterType((*RegistrationConfirmation)(nil), "RegistrationConfirmation")
}

func init() {
	proto.RegisterFile("description.proto", fileDescriptor_ed1487b35d25909c)
}

var fileDescriptor_ed1487b35d25909c = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0x46, 0x09, 0xe9, 0x47, 0x37, 0x6d, 0xee, 0x80, 0x90, 0xc1, 0x34, 0x45, 0x42, 0xda,
	0xc9, 0x15, 0xdb, 0x81, 0xc3, 0xc4, 0x81, 0x76, 0x1c, 0xa2, 0x81, 0xa8, 0x32, 0xd8, 0x81, 0x4b,
	0xe5, 0x36, 0x5f, 0x53, 0xab, 0xa9, 0x6d, 0x39, 0xce, 0xd0, 0x7e, 0x25, 0x3f, 0x09, 0x14, 0xbb,
	0x99, 0x5a, 0xb5, 0xbb, 0xe5, 0x7b, 0xef, 0xe5, 0xf9, 0xf9, 0x7d, 0x86, 0xa3, 0x0c, 0xcb, 0xa9,
	0xe6, 0xca, 0x70, 0x29, 0xa8, 0xd2, 0xd2, 0xc8, 0xe8, 0x34, 0x97, 0x32, 0x2f, 0xb0, 0x6f, 0xa7,
	0x49, 0x35, 0xeb, 0xff, 0xd1, 0x4c, 0x29, 0xd4, 0xa5, 0xe3, 0xe3, 0x7f, 0x1e, 0x1c, 0x5d, 0xe3,
	0x3d, 0x9f, 0x62, 0x22, 0x66, 0x52, 0x2f, 0x59, 0xfd, 0x2f, 0xf9, 0x00, 0x07, 0x4c, 0xa9, 0x82,
	0x4f, 0xed, 0x38, 0xe6, 0x59, 0xe8, 0x9d, 0x79, 0xe7, 0x9d, 0x74, 0x7f, 0x0d, 0x4d, 0x32, 0xd2,
	0x87, 0xde, 0xba, 0xec, 0x1e, 0x75, 0xc9, 0xa5, 0x08, 0xf7, 0xac, 0x96, 0xac, 0x51, 0x77, 0x8e,
	0x21, 0x9f, 0x20, 0x50, 0x05, 0x33, 0xf5, 0x41, 0xe1, 0xb3, 0x33, 0xef, 0xfc, 0xe0, 0xe2, 0x84,
	0x6e, 0x9d, 0x4e, 0x47, 0x2b, 0x49, 0xfa, 0x28, 0xae, 0x03, 0x65, 0x56, 0x37, 0xce, 0xd0, 0x30,
	0x5e, 0x94, 0x61, 0xdb, 0x05, 0x72, 0xe8, 0xb5, 0x03, 0x09, 0x81, 0xb6, 0x60, 0x4b, 0x0c, 0x9f,
	0x5b, 0xd2, 0x7e, 0xc7, 0xa7, 0x10, 0x34, 0x86, 0x04, 0xc0, 0xff, 0xfe, 0x63, 0x90, 0x7c, 0xfb,
	0x7a, 0xd8, 0x22, 0x3e, 0xec, 0x8d, 0x86, 0x87, 0x5e, 0x9c, 0xc3, 0xab, 0x2f, 0x95, 0x99, 0xa3,
	0x30, 0xab, 0xb0, 0x8d, 0xd9, 0x47, 0x38, 0x66, 0x1b, 0xc4, 0xd8, 0xc8, 0x05, 0x0a, 0x5b, 0x45,
	0x37, 0xed, 0x6d, 0x72, 0x3f, 0x6b, 0x8a, 0x9c, 0x40, 0x67, 0x15, 0x93, 0x67, 0xb6, 0x86, 0x6e,
	0x1a, 0x38, 0x20, 0xc9, 0xe2, 0x11, 0xf4, 0x52, 0xcc, 0x79, 0x69, 0xf4, 0xc6, 0x31, 0x11, 0x04,
	0x55, 0x89, 0xda, 0xe6, 0x76, 0x2d, 0x3f, 0xce, 0xe4, 0x3d, 0xc0, 0x92, 0x95, 0x06, 0xf5, 0x78,
	0x81, 0x0f, 0x2b, 0xc3, 0x8e, 0x43, 0x6e, 0xf0, 0x21, 0xbe, 0x84, 0x70, 0xdd, 0x71, 0x28, 0xc5,
	0x8c, 0x37, 0x2b, 0x7c, 0x03, 0x2f, 0x6a, 0x9b, 0x66, 0x77, 0xdd, 0xd4, 0xaf, 0xc7, 0x24, 0xbb,
	0xf8, 0xeb, 0x41, 0x7b, 0x38, 0x67, 0x86, 0x5c, 0xc1, 0xcb, 0x5b, 0x34, 0x95, 0x72, 0x0b, 0x20,
	0x64, 0x7b, 0x13, 0xd1, 0x6b, 0xba, 0xb3, 0x9a, 0xb8, 0x45, 0x6e, 0x60, 0x7f, 0x38, 0xc7, 0xe9,
	0xe2, 0x57, 0x13, 0xf5, 0x1d, 0x75, 0x2f, 0x8d, 0x36, 0x2f, 0x8d, 0xde, 0x1a, 0xcd, 0x45, 0x7e,
	0xc7, 0x8a, 0x0a, 0xa3, 0x68, 0x8b, 0x1d, 0x48, 0x59, 0x58, 0x2e, 0x6e, 0x91, 0xcf, 0x10, 0xb8,
	0x7b, 0xa0, 0x26, 0xc7, 0x74, 0x47, 0x49, 0xd1, 0x5b, 0xfa, 0xd4, 0x45, 0xe3, 0xd6, 0xc0, 0xff,
	0xdd, 0xa6, 0x57, 0x6a, 0x32, 0xf1, 0xad, 0xf9, 0xe5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0xe1, 0xdc, 0x78, 0x07, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	// SetupDevice create an entry on the server and prepares device authentication token
	SetupDevice(ctx context.Context, in *DeviceInformation, opts ...grpc.CallOption) (*AuthenticationDetails, error)
	// CheckUsername returns whether specified username is available for registration
	CheckUsername(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	// Register creates new user entry on the server, binds it to the current device, and returns new user ID
	Register(ctx context.Context, in *RegistrationDetails, opts ...grpc.CallOption) (*RegistrationConfirmation, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) SetupDevice(ctx context.Context, in *DeviceInformation, opts ...grpc.CallOption) (*AuthenticationDetails, error) {
	out := new(AuthenticationDetails)
	err := c.cc.Invoke(ctx, "/Chat/SetupDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckUsername(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/Chat/CheckUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Register(ctx context.Context, in *RegistrationDetails, opts ...grpc.CallOption) (*RegistrationConfirmation, error) {
	out := new(RegistrationConfirmation)
	err := c.cc.Invoke(ctx, "/Chat/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	// SetupDevice create an entry on the server and prepares device authentication token
	SetupDevice(context.Context, *DeviceInformation) (*AuthenticationDetails, error)
	// CheckUsername returns whether specified username is available for registration
	CheckUsername(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	// Register creates new user entry on the server, binds it to the current device, and returns new user ID
	Register(context.Context, *RegistrationDetails) (*RegistrationConfirmation, error)
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) SetupDevice(ctx context.Context, req *DeviceInformation) (*AuthenticationDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupDevice not implemented")
}
func (*UnimplementedChatServer) CheckUsername(ctx context.Context, req *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsername not implemented")
}
func (*UnimplementedChatServer) Register(ctx context.Context, req *RegistrationDetails) (*RegistrationConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_SetupDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SetupDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/SetupDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SetupDevice(ctx, req.(*DeviceInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/CheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckUsername(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Register(ctx, req.(*RegistrationDetails))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupDevice",
			Handler:    _Chat_SetupDevice_Handler,
		},
		{
			MethodName: "CheckUsername",
			Handler:    _Chat_CheckUsername_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Chat_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "description.proto",
}
