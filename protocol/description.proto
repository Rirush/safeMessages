syntax = "proto3";

option go_package = ".;types";
import "google/protobuf/wrappers.proto";

service Chat {
    // SetupDevice create an entry on the server and prepares device authentication token
    rpc SetupDevice(DeviceInformation) returns (AuthenticationDetails) {}
    // CheckUsername returns whether specified username is available for registration
    rpc CheckUsername(google.protobuf.StringValue) returns (google.protobuf.BoolValue) {}
    // Register creates new user entry on the server, binds it to the current device, and returns new user ID
    rpc Register(RegistrationDetails) returns (RegistrationConfirmation) {}
}

message DeviceInformation {
    enum Platform {
        MOBILE = 0;
        PC = 1;
    }
    // application_id is defined by the developer of the application
    string application_id = 1;
    // application_version is human-readable current version of the application
    string application_version = 2;
    // platform describes the platform device is on
    Platform platform = 3;
    // device_details contains some information about the device, that can help identifying it.
    // E.g. OS version, manufacturer, and/or model
    string device_details = 4;
    // name is a string that has human-defined device name
    string name = 5;
}

message AuthenticationDetails {
    // authentication_token is an array of random bytes, that is used to authenticate current device on the server
    bytes authentication_token = 1;
    // device_id is UUID that is used to target current device in different operations, e.g. slave key exchanges
    bytes device_id = 2;
}

message RegistrationDetails {
    // username is string, that may contain latin alphabet, underscores, and dots.
    // This string is case-insensitive and must be unique across the server
    string username = 1;
    // Key is the public Ed25519 key, that is used for secure session establishment.
    // This field may be replaced in the future by an array of pre-generated ephemeral keys
    bytes key = 2;
}

message RegistrationConfirmation {
    // user_id is UUID that is used to target current user in different operations, e.g. sending messages
    bytes user_id = 1;
}